// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type NetInetFlowId NetInetFlowIdT

type NetInetFlowIdT struct {
	SrcIp             struct{ In6U struct{ U6Addr8 [16]uint8 } }
	DstIp             struct{ In6U struct{ U6Addr8 [16]uint8 } }
	EthProtocol       uint16
	Direction         uint8
	SrcPort           uint16
	DstPort           uint16
	TransportProtocol uint8
	IfIndex           uint32
}

type NetInetFlowMetrics NetInetFlowMetricsT

type NetInetFlowMetricsT struct {
	Packets         uint32
	Bytes           uint64
	StartMonoTimeNs uint64
	EndMonoTimeNs   uint64
	Flags           uint16
	Errno           uint8
}

type NetInetFlowRecordT struct {
	Id      NetInetFlowId
	Metrics NetInetFlowMetrics
}

// LoadNetInet returns the embedded CollectionSpec for NetInet.
func LoadNetInet() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_NetInetBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load NetInet: %w", err)
	}

	return spec, err
}

// LoadNetInetObjects loads NetInet and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*NetInetObjects
//	*NetInetPrograms
//	*NetInetMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadNetInetObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadNetInet()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// NetInetSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type NetInetSpecs struct {
	NetInetProgramSpecs
	NetInetMapSpecs
}

// NetInetSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type NetInetProgramSpecs struct {
	InetSockSetState *ebpf.ProgramSpec `ebpf:"inet_sock_set_state"`
}

// NetInetMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type NetInetMapSpecs struct {
	AggregatedFlows *ebpf.MapSpec `ebpf:"aggregated_flows"`
	DirectFlows     *ebpf.MapSpec `ebpf:"direct_flows"`
}

// NetInetObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadNetInetObjects or ebpf.CollectionSpec.LoadAndAssign.
type NetInetObjects struct {
	NetInetPrograms
	NetInetMaps
}

func (o *NetInetObjects) Close() error {
	return _NetInetClose(
		&o.NetInetPrograms,
		&o.NetInetMaps,
	)
}

// NetInetMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadNetInetObjects or ebpf.CollectionSpec.LoadAndAssign.
type NetInetMaps struct {
	AggregatedFlows *ebpf.Map `ebpf:"aggregated_flows"`
	DirectFlows     *ebpf.Map `ebpf:"direct_flows"`
}

func (m *NetInetMaps) Close() error {
	return _NetInetClose(
		m.AggregatedFlows,
		m.DirectFlows,
	)
}

// NetInetPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadNetInetObjects or ebpf.CollectionSpec.LoadAndAssign.
type NetInetPrograms struct {
	InetSockSetState *ebpf.Program `ebpf:"inet_sock_set_state"`
}

func (p *NetInetPrograms) Close() error {
	return _NetInetClose(
		p.InetSockSetState,
	)
}

func _NetInetClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed netinet_bpfel_arm64.o
var _NetInetBytes []byte
